name: E2E Tests with Cloudflare Tunnel

on:
  push:
    branches: [ master, main, vibecode, setup-github-actions ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  e2e-cloudflare-tunnel:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install cloudflared
      run: |
        # Download and install cloudflared
        wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64
        sudo mv cloudflared-linux-amd64 /usr/local/bin/cloudflared
        sudo chmod +x /usr/local/bin/cloudflared
        
        # Verify installation
        cloudflared --version
        
        # Create symlink in project directory for tests
        ln -s /usr/local/bin/cloudflared ./cloudflared
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-timeout
        pip install -e .
    
    - name: Run E2E tunnel tests
      run: |
        # Run only the tunnel tests
        pytest tests/tunnel/ -v --timeout=120
      env:
        PYTHONPATH: ${{ github.workspace }}
    
    - name: Run TCP server E2E tests
      run: |
        # Run TCP server tests that don't require API keys
        pytest tests/tcp/ -v --timeout=60
      env:
        PYTHONPATH: ${{ github.workspace }}
    
    - name: Test MCP server with quick tunnel
      run: |
        # Create a simple E2E test script
        cat > test_e2e_tunnel.py << 'EOF'
        #!/usr/bin/env python3
        """Quick E2E test of MCP server with Cloudflare tunnel"""
        import subprocess
        import time
        import requests
        import json
        import re
        import sys
        import os
        
        def test_mcp_tunnel():
            mcp_process = None
            tunnel_process = None
            
            try:
                # Start MCP server in TCP mode
                print("Starting MCP server...")
                env = os.environ.copy()
                env["MCP_PORT"] = "3333"
                env["MCP_MODE"] = "tcp"
                
                mcp_process = subprocess.Popen(
                    [sys.executable, "-m", "run_mcp_server"],
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True,
                    env=env
                )
                
                # Give it time to start
                time.sleep(5)
                
                # Start cloudflare tunnel
                print("Starting Cloudflare tunnel...")
                tunnel_process = subprocess.Popen(
                    ["cloudflared", "tunnel", "--url", "http://localhost:3333"],
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True
                )
                
                # Wait for tunnel URL
                tunnel_url = None
                start_time = time.time()
                
                while time.time() - start_time < 30:
                    line = tunnel_process.stderr.readline()
                    if line:
                        print(f"[TUNNEL] {line.strip()}")
                        if 'trycloudflare.com' in line:
                            match = re.search(r'https://[a-zA-Z0-9\-]+\.trycloudflare\.com', line)
                            if match:
                                tunnel_url = match.group(0)
                                print(f"\n✅ Tunnel URL: {tunnel_url}")
                                break
                
                if not tunnel_url:
                    print("❌ Failed to get tunnel URL")
                    return False
                
                # Wait for DNS propagation
                print("Waiting for tunnel to stabilize...")
                time.sleep(10)
                
                # Test the tunnel
                print(f"\nTesting MCP server at {tunnel_url}")
                
                try:
                    # Test basic connectivity
                    response = requests.post(
                        tunnel_url,
                        headers={"Content-Type": "application/json"},
                        json={
                            "jsonrpc": "2.0",
                            "id": 1,
                            "method": "initialize",
                            "params": {}
                        },
                        timeout=15
                    )
                    
                    if response.status_code == 200:
                        result = response.json()
                        if "result" in result and "capabilities" in result["result"]:
                            print("✅ MCP server is accessible via Cloudflare tunnel!")
                            print(f"   Server info: {result['result'].get('serverInfo', {})}")
                            return True
                        else:
                            print(f"❌ Unexpected response: {result}")
                            return False
                    else:
                        print(f"❌ HTTP {response.status_code}: {response.text[:200]}")
                        return False
                        
                except Exception as e:
                    print(f"❌ Request failed: {e}")
                    return False
                    
            except Exception as e:
                print(f"❌ Test failed: {e}")
                return False
                
            finally:
                # Cleanup
                if tunnel_process:
                    tunnel_process.terminate()
                    tunnel_process.wait()
                if mcp_process:
                    mcp_process.terminate()
                    mcp_process.wait()
        
        if __name__ == "__main__":
            success = test_mcp_tunnel()
            sys.exit(0 if success else 1)
        EOF
        
        python test_e2e_tunnel.py
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: e2e-test-results
        path: |
          *.log
          test_*.py